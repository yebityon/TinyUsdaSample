#usda 1.0
(
    endFrame = 2
    startFrame = 0
    upAxis = "Z"
)

def Xform "Root"
{
    def PointInstancer "Instancer"
    {
        float3[] extent = [(-11, -1, -1), (11, 1, 6)]
        point3f[] positions = [(-10, 0, 0), (-5, 0, 0), (0, 0, 0), (5, 0, 0), (10, 0, 0),(15,0,0), (15,15,15)]
        int[] protoIndices = [0, 1, 2, 3, 4, 3, 0]
        rel prototypes = [
            </Root/Instancer/prototypes/Proto1>,
            </Root/Instancer/prototypes/Proto2>,
            </Root/Instancer/prototypes/Proto3>,
            </Root/Instancer/prototypes/Proto4>,
            </Root/Instancer/prototypes/Proto5>,
            
        ]
        double3 xformOp:translate.timeSamples = {
            0: (0, 0, 0),
            1: (1, 0, 0),
            2: (1, 0, 0),
        }
        uniform token[] xformOpOrder = ["xformOp:translate"]

        def "prototypes"
        {
            def Xform "Proto1"
            {
                # prototype root transform must be ignored.
                double3 xformOp:translate.timeSamples = {
                    0: (0, 0, 0),
                    1: (0, 0, 0),
                    2: (0, 0, 1),
                }
                uniform token[] xformOpOrder = ["xformOp:translate"]

                def Mesh "cube"
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                    int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
                    point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
                    color3f[] primvars:displayColor = [(1, 1, 1)]
                }
            }

            def Xform "Proto2"
            {
                def Xform "cubexform"
                {
                    # not a root transform should be considered.
                    double3 xformOp:translate.timeSamples = {
                        0: (0, 0, 0),
                        1: (0, 0, 0),
                        2: (0, 0, 1),
                    }
                    uniform token[] xformOpOrder = ["xformOp:translate"]

                    def Mesh "cube"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                        int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
                        point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
                        color3f[] primvars:displayColor = [(0.0, 0.0, 0.0)]
                    }
                }
            }

            def PointInstancer "Proto3"
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 6)]
                point3f[] positions = [(0, 0, 0), (0, 0, 5)]
                int[] protoIndices = [0, 0]
                rel prototypes = </Root/Instancer/prototypes/Proto3/prototypes>
                # prototype root transform must be ignored ??
                double3 xformOp:translate.timeSamples = {
                    0: (0, 0, 0),
                    1: (0, 0, 0),
                    2: (0, 0, 1),
                }
                uniform token[] xformOpOrder = ["xformOp:translate"]

                def "prototypes"
                {
                    def Xform "Proto1"
                    {
                        def Mesh "cube"
                        {
                            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                            int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
                            point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
                            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
                        }
                    }
                }
            }

            def Xform "Proto4"
            {
                # prototype root transform must be ignored.
                double3 xformOp:translate.timeSamples = {
                    0: (0, 0, 0),
                    1: (0, 0, 0),
                    2: (0, 0, 1),
                }
                uniform token[] xformOpOrder = ["xformOp:translate"]

                def PointInstancer "Instancer2"
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 6)]
                    point3f[] positions = [(0, 0, 0), (0, 0, 5)]
                    int[] protoIndices = [0, 0]
                    rel prototypes = </Root/Instancer/prototypes/Proto4/Instancer2/prototypes>

                    def "prototypes"
                    {
                        def Xform "Proto1"
                        {
                            def Mesh "cube"
                            {
                                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                                int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
                                point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
                                color3f[] primvars:displayColor = [(0.2, 0.2, 0.2)]
                            }
                        }
                    }
                }
            }

            def Xform "Proto5"
            {
                def Xform "root"
                {
                    double3 xformOp:translate.timeSamples = {
                        0: (0, 0, 0),
                        1: (0, 0, 0),
                        2: (0, 0, 1),
                    }
                    uniform token[] xformOpOrder = ["xformOp:translate"]

                    def PointInstancer "Instancer2"
                    {
                        float3[] extent = [(-1, -1, -1), (1, 1, 6)]
                        point3f[] positions = [(0, 0, 0), (0, 0, 5)]
                        int[] protoIndices = [0, 0]
                        rel prototypes = </Root/Instancer/prototypes/Proto5/root/Instancer2/prototypes>

                        def "prototypes"
                        {
                            def Xform "Proto1"
                            {
                                def Mesh "cube"
                                {
                                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                                    int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                                    int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
                                    point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
                                    color3f[] primvars:displayColor = [(0.2, 0.2, 0.2)]
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}